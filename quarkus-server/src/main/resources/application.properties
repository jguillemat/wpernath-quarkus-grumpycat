#
# quarkus internal settings
#
# use and implement CORS filters
quarkus.http.cors=true
quarkus.http.cors.origins=/.*/

# make sure the maps and terrain json files will be watched as well
quarkus.live-reload.watched-resources=/maps/Level1.tmj,/maps/Level2.tmj,/maps/Level3.tmj,/maps/Level4.tmj,/maps/Level5.tmj,/maps/Terrain.tsj,/maps/spiders.tsj,/maps/bomb.tsj

# make sure maps will be included even if native compilation and packaging
quarkus.native.resources.includes=**/maps/**

#
# container image properties
#
quarkus.container-image.image=quay.io/wpernath/quarkus-grumpycat:v${quarkus.application.version}
quarkus.container-image.builder=jib
quarkus.container-image.build=false
quarkus.container-image.push=false
quarkus.native.container-build=true

#
# Datasource options
#
quarkus.datasource.db-kind=postgresql
quarkus.hibernate-orm.log.sql=true
quarkus.hibernate-orm.log.format-sql=true

# the following props only for production
%prod.quarkus.hibernate-orm.database.generation=create
%prod.quarkus.datasource.username=${DB_user:cat}
%prod.quarkus.datasource.password=${DB_password:grumpy}
%prod.quarkus.datasource.jdbc.url=jdbc:postgresql://${DB_host:catserver}/${DB_dbname:catdb}


#
# Strimzi / Kafka 
# 
kafka.auto.offset.reset=earliest
%prod.kafka.bootstrap.servers=kafka:9092

mp.messaging.incoming.player.topic=player-actions
mp.messaging.incoming.player.connector=smallrye-kafka
mp.messaging.incoming.player.value.deserializer=org.wanja.fatcat.PlayerActionDeserializer
mp.messaging.incoming.player.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer

mp.messaging.incoming.enemy.topic=enemy-actions
mp.messaging.incoming.enemy.connector=smallrye-kafka
mp.messaging.incoming.enemy.value.deserializer=org.wanja.fatcat.EnemyActionDeserializer
mp.messaging.incoming.enemy.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer


#
# WebSocket for incoming state updates of the client 
# in single player mode
# 
mp.messaging.incoming.incoming-states.connector=quarkus-websocket
mp.messaging.incoming.incoming-states.path=/player-update
mp.messaging.incoming.incoming-states.buffer-size=64

mp.messaging.incoming.incoming-enemy.connector=quarkus-websocket
mp.messaging.incoming.incoming-enemy.path=/enemy-update
mp.messaging.incoming.incoming-enemy.buffer-size=128


#
# OIDC
#
#%prod.quarkus.oidc.auth-server-url=https://localhost:8543/realms/quarkus
#quarkus.oidc.client-id=backend-service
#quarkus.oidc.credentials.secret=secret
#quarkus.oidc.tls.verification=none
# Enable Policy Enforcement
#quarkus.keycloak.policy-enforcer.enable=true
# Tell Dev Services for Keycloak to import the realm file
# This property is not effective when running the application in JVM or Native modes
#quarkus.keycloak.devservices.realm-path=quarkus-realm.json


#
# GitHub OIDC
#
#quarkus.oidc.github.provider=github
#quarkus.oidc.github.client-id=0b0518b993a594f14c2b
#quarkus.oidc.github.credentials.secret=ebb2f89bc99ab62b0885e449ad5e0f5f868c555a

# Manual context
#quarkus.oidc.manual.tenant-enabled=false

# Default is just disabled
#quarkus.oidc.tenant-enabled=false

# Get rid of keycloak dev services
#quarkus.keycloak.devservices.enabled=false

# Must be set to get proper error reporting
#quarkus.http.auth.proactive=false

# own props
application.version=v${quarkus.application.version}
#quarkus.http.http2=true
%dev.quarkus.http.host=0.0.0.0


