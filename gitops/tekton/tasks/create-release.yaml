apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    tekton.dev/pipelines.minVersion: 0.12.1
    tekton.dev/tags: git
  name: create-release
  labels:
    app.kubernetes.io/version: '0.2'
    operator.tekton.dev/provider-type: community
spec:
  description: This Task can be used to update image digest in a Git repo using kustomize. It requires a secret with credentials for accessing the git repo.
  params:
    - name: release-name
      description: The tag of the release. There is a branch with release-$(release-name) available
    - name: old-image
    - name: new-image
    - name: digest
    - name: kustomize-dir

  workspaces:
    - description: The workspace consisting of maven project.
      name: workspace

  results:
    - name: commit
      description: The commit SHA

  steps:
    - name: git-pull
      image: docker.io/bitnami/git:2.45.0
      onError: continue
      workingDir: $(workspaces.workspace.path)/the-config
      script: |
        git config --global --add safe.directory /workspace/workspace/the-config
        git status
        # pull possible existing origin branch, but continue if not found
        git pull origin release-$(params.release-name) || true

    - name: update-digest
      image: quay.io/wpernath/kustomize-ubi:latest
      workingDir: $(workspaces.workspace.path)/the-config/$(params.kustomize-dir)
      script: |        
        kustomize edit set image $(params.old-image)=$(params.new-image):$(params.release-name)@$(params.digest)

    - name: git-commit
      image: docker.io/bitnami/git:2.45.0
      workingDir: $(workspaces.workspace.path)/the-config
      script: |
        git config --global --add safe.directory /workspace/workspace/the-config
        git config user.email "wpernath@redhat.com"
        git config user.name "My Tekton Bot"

        git status
        git add $(params.kustomize-dir)/kustomization.yaml
        git commit -m "[ci] Updated image digest for $(params.new-image) for $(params.release-name)"
        
        
        git push --set-upstream origin release-$(params.release-name)

        RESULT_SHA="$(git rev-parse HEAD | tr -d '\n')"
        EXIT_CODE="$?"
        if [ "$EXIT_CODE" != 0 ]
        then
          exit $EXIT_CODE
        fi
        # Make sure we don't add a trailing newline to the result!
        echo -n "$RESULT_SHA" > $(results.commit.path)